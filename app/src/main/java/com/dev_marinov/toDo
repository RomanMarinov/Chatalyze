Схема авторизации
1. перед открытием экрана входа я проверяю в бд наличие такого же
 токена который ранее сохранил на клиенте

2. если такой токен есть в бд, то юзер видит главный экран
3. если такого токена нет в бд, то юзер видит экран входа

4.1 юзер вводит данные для входа и я проверяю в бд есть такие записи.
4.1.1 если их нет то показываю сообщение "вы не зарегистрированы"
4.1.2 если они есть то генерю новый токен, сохраняю его в бд, потом сохраняю
его на клиенте и юзер видит главный экран

4.2 при регистрации юзера я сохраняю данные в бд и генерю токен и после удачного
сохранения я сохраняю токен на клиенте и перебрасываю юзера на экран входа









for update gradle compose compiler and kotlin versions
https://developer.android.com/jetpack/androidx/releases/compose-kotlin





на будущее
для отправки данных
@Field: Аннотация @Field используется для отправки параметров в виде полей
(application/x-www-form-urlencoded). Она применяется в сочетании с аннотацией
 @FormUrlEncoded на уровне метода или класса. Каждый параметр,
  помеченный @Field, будет представлять собой отдельное поле в запросе.
  Эта аннотация полезна при работе с формами и отправке данных формы на сервер.
Plain Text
Copy code
@FormUrlEncoded
@POST("endpoint")
suspend fun sendFormData(
    @Field("param1") value1: String,
    @Field("param2") value2: Int
): Response<ApiResponse>
@Query: Аннотация @Query используется для добавления параметров в URL запроса
 (application/x-www-form-urlencoded). Она добавляет параметры в URL запроса с
 использованием символа "?". Каждый параметр, помеченный @Query, будет
 добавлен в URL в виде key=value. Эта аннотация полезна, когда вам нужно
 передать параметры через URL запроса.
Plain Text
Copy code
@GET("endpoint")
suspend fun getData(
    @Query("param1") value1: String,
    @Query("param2") value2: Int
): Response<ApiResponse>
@Part: Аннотация @Part используется для отправки файлов или данных
формы в формате multipart/form-data. Эта аннотация часто используется
при загрузке файлов на сервер. Каждый параметр, помеченный @Part, будет
представлять собой часть multipart/form-data запроса.
Plain Text
Copy code
@Multipart
@POST("upload")
suspend fun uploadFile(
    @Part file: MultipartBody.Part,
    @Part("description") description: RequestBody
): Response<ApiResponse>
В зависимости от вашего конкретного случая использования, вы можете выбрать
 подходящую аннотацию для передачи параметров или данных в запросе.