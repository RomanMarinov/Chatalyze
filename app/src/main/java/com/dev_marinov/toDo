какие гланые тригеры перезапуска

1 слушатель жиз цикла с тремя ивентами
(отрабатывает всегда)
2 hasPermission для двух пермишинов (ЭТО НЕ ПРАВИЛЬНО ИСПОЛЬЗОВАТЬ)
(отрабатывает всегда)

что мне надо вызывать

следовательно я буду вызывать



описание проблемы
1 надо сначала разрешить два пермишина
2 далее получить телефон и потом стартовать сервис
3 и потом ориентируясь на жц повторно стартовать сервис






 val lifecycleOwner = LocalLifecycleOwner.current
    DisposableEffect(key1 = lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            if (event == Lifecycle.Event.ON_START) {


                viewModel.connectToChat(senderPhone, recipientPhone)
            } else if (event == Lifecycle.Event.ON_STOP) {


            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)
        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }



если стартовать бродкаст в чаты то и его нужно отключать???

что если бродкаст будет работать до тех пор пока прила не будет закрыто или свернуто











написать функцию авторизатион для проверки токена


проблема
при нажатии кнопки назад на экране чата
ботом шит не показывается
а при нажатии системной кнопки назд боттом щит показывается

проблема при нажатии кнопки закрыть крестик у боттом щит не показывается визуальный клик




for update gradle compose compiler and kotlin versions
https://developer.android.com/jetpack/androidx/releases/compose-kotlin



добавить проверку пермишина на предоставление номера и списка контактов
по клику на элемент списка на ChatsScreen




на будущее
для отправки данных
@Field: Аннотация @Field используется для отправки параметров в виде полей
(application/x-www-form-urlencoded). Она применяется в сочетании с аннотацией
 @FormUrlEncoded на уровне метода или класса. Каждый параметр,
  помеченный @Field, будет представлять собой отдельное поле в запросе.
  Эта аннотация полезна при работе с формами и отправке данных формы на сервер.
Plain Text
Copy code
@FormUrlEncoded
@POST("endpoint")
suspend fun sendFormData(
    @Field("param1") value1: String,
    @Field("param2") value2: Int
): Response<ApiResponse>
@Query: Аннотация @Query используется для добавления параметров в URL запроса
 (application/x-www-form-urlencoded). Она добавляет параметры в URL запроса с
 использованием символа "?". Каждый параметр, помеченный @Query, будет
 добавлен в URL в виде key=value. Эта аннотация полезна, когда вам нужно
 передать параметры через URL запроса.
Plain Text
Copy code
@GET("endpoint")
suspend fun getData(
    @Query("param1") value1: String,
    @Query("param2") value2: Int
): Response<ApiResponse>
@Part: Аннотация @Part используется для отправки файлов или данных
формы в формате multipart/form-data. Эта аннотация часто используется
при загрузке файлов на сервер. Каждый параметр, помеченный @Part, будет
представлять собой часть multipart/form-data запроса.
Plain Text
Copy code
@Multipart
@POST("upload")
suspend fun uploadFile(
    @Part file: MultipartBody.Part,
    @Part("description") description: RequestBody
): Response<ApiResponse>
В зависимости от вашего конкретного случая использования, вы можете выбрать
 подходящую аннотацию для передачи параметров или данных в запросе.




 ///////////
 для перехвата и обновления токена
 https://stackoverflow.com/questions/71845993/how-can-i-refresh-jwt-and-request-the-original-request-again-and-get-the-respons

 https://www.appsloveworld.com/kotlin/100/44/how-to-refresh-the-jwt-token-before-calling-the-rest-api-in-android-retrofit-r